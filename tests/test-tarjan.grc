IntTable lowlink;
IntTable index;
IntTable complete;
NodeList controlStack;
NodeList tarjanStack;
int i=0;

void updateLowlink(int i, Node n){
    //check in the lowLink
    print("updating lowlink");
    print(n.data());
    if(lowlink[n] > i ){
        lowlink[n] = i;
    }
}

void addNode(Node n){
    print("adding node");
    print(n.data());
    lowlink[n] = i;
    index[n] = i;
    i = i + 1;
    controlStack.prependNode(n);
    tarjanStack.prependNode(n);
    n.updateVisited(True);
}

NodeList tarjan(Node startNode){
    NodeList scc = createNodeList();
    addNode(startNode);
    while(!controlStack.empty_NL()){
        Node n = controlStack.removeFirst_NL();
        //if node has unexplored edge to child
        //weight 1.0 = visited for edge, and weight = 0.0 means not visited
        for(Edge e in n.edges()){
            if(e.weight() == 0.0){
                Node child = e.end();
                //mark as visited
                e.updateEdge(1.0);
                if(child.visited()==False){
                    addNode(child);
                }
                else if(tarjanStack.includesNode(child)){
                    updateLowlink(index[child], n);
                }
            }
            else{
                print("in else");
                controlStack.removeFirst_NL();
                if(!controlStack.empty_NL()){
                    Node top = controlStack.head_NL();
                    updateLowlink(lowlink[n], top);
                }
                if(lowlink[n] == index[n]){
                    print("lowlink = index");
                    bool isW = False; 
                    while(!isW){
                        Node w = tarjanStack.removeFirst_NL();
                        scc.appendNode(w);
                        //mark as complete
                        complete[w] = 1;
                        if(w.nodeEquals(n)){
                            isW = True;
                        }
                    }
                }
            }
        }
    }
    return scc;
}
int printNl(NodeList nl){
    for (Node n in nl) { 
        print(n.data());
    }
    return 0;
}

int main(){
    lowlink = createIntTable(15);
    index = createIntTable(15);
    complete = createIntTable(15);
    controlStack = createNodeList();
    tarjanStack = createNodeList();

    
    Graph g = createGraph(10);
    Node A = g.createNode("A");
    Node B = g.createNode("B");
    Node C = g.createNode("C");
    Node D = g.createNode("D");
    Node E = g.createNode("E");
    //initialize weights to 0.0

    Edge e1 = g.addEdge(A, B, 0.0);
    //Edge e2 = g.addEdge(B, A, 0.0);
    Edge e3 = g.addEdge(C, D, 0.0);
    //Edge e4 = g.addEdge(D, C, 0.0);
    Edge e5 = g.addEdge(D, E, 0.0);
    Edge e6 = g.addEdge(E, D, 0.0);
    Edge e7 = g.addEdge(C, E, 0.0);
    Edge e8 = g.addEdge(E, C, 0.0);

    NodeList result1 = tarjan(A);
    NodeList result2 = tarjan(C);

    print("result 1:");
    printNl(result1);
    print("result 2:");
    printNl(result2);
    return 0;
}