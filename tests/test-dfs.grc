bool alreadyVisited;
Node source;

void printNodeList(NodeList nl){
    for (Node n in nl){
        print(n.data());
    }
}

bool goalTest(Node goal, Node current){
    return current.nodeEquals(goal);
}

int normalDFS(Node current, Node goal, NodeList myPath){
    if (goalTest(goal, current)){
        bool notfound = True;
        while (notfound) {
            myPath.prependNode(current); 
            if(current.nodeEquals(source)){
                notfound = False;
            }
            current = current.prec();
        }
        for (Node n in myPath) {
            print(n.data());
        }
    } else {
        current.updateVisited(True);
        for (Node n in current.neighbors()) {
            alreadyVisited = n.visited();
            if (!alreadyVisited){
                n.setPrec(current);
                normalDFS(n, goal, myPath);
            }
        }
    }

    return 0;
}

int main(){
    Graph g = createGraph(12);
    Node node1 = g.createNode("A");
    Node node2 = g.createNode("B");
    Node node3 = g.createNode("C");
    Node node4 = g.createNode("D");
    Node node5 = g.createNode("E");
    Node node6 = g.createNode("F");
    Node node7 = g.createNode("G");
    Node node8 = g.createNode("H");
    Node node9 = g.createNode("I");
    Node node10 = g.createNode("J");
    Edge e1 = g.addEdge(node1, node2, 14.0);
    Edge e2 = g.addEdge(node2, node5, 13.0);
    Edge e3 = g.addEdge(node5, node9, 43.0);
    Edge e4 = g.addEdge(node1, node3, 13.0);
    Edge e5 = g.addEdge(node3, node6, 43.0);
    Edge e6 = g.addEdge(node3, node7, 13.0);
    Edge e7 = g.addEdge(node6, node10, 43.0);
    Edge e8 = g.addEdge(node1, node4, 13.0);
    Edge e9 = g.addEdge(node4, node8, 43.0);

    Node node11 = g.createNode("K");
    Node node12 = g.createNode("L");
    Node node13 = g.createNode("M");
    Node node14 = g.createNode("N");
    Node node15 = g.createNode("O");
    Node node16 = g.createNode("P");
    Node node17 = g.createNode("Q");
    Node node18 = g.createNode("R");
    Node node19 = g.createNode("S");
    Node node20 = g.createNode("T");
    Node node21 = g.createNode("U");
    Node node22 = g.createNode("V");
    Node node23 = g.createNode("W");
    Node node24 = g.createNode("X");
    Node node25 = g.createNode("Y");

    Edge e10 = g.addEdge(node9, node11, 5.0);
    Edge e11 = g.addEdge(node11, node12, 2.0);
    Edge e12 = g.addEdge(node12, node13, 3.333);
    Edge e13 = g.addEdge(node13, node14, 3.333);
    Edge e14 = g.addEdge(node13, node15, 3.333);
    Edge e15 = g.addEdge(node14, node15, 0.45);

    e4 = g.addEdge(node1, node3, 13.0);
    e5 = g.addEdge(node3, node6, 43.0);
    e6 = g.addEdge(node3, node7, 13.0);
    Edge e16 = g.addEdge(node7, node16, 8.0);
    Edge e17 = g.addEdge(node7, node17, 1.35);
    Edge e18 = g.addEdge(node17, node18, 5.77777);
    Edge e19 = g.addEdge(node18, node19, 5.5);
    Edge e20 = g.addEdge(node19, node17, -45.0);

    e7 = g.addEdge(node6, node10, 43.0);
    Edge e21 = g.addEdge(node10, node20, -5.0);
    Edge e22 = g.addEdge(node10, node21, -3.0);
    Edge e23 = g.addEdge(node21, node22, 100.);
    Edge e24 = g.addEdge(node20, node23, 66.0);

    e8 = g.addEdge(node1, node4, 13.0);
    e9 = g.addEdge(node4, node8, 43.0);
    Edge e25 = g.addEdge(node8, node24, 1000.);
    Edge e26 = g.addEdge(node24, node25, 66.0);
    
    NodeList myPath = createNodeList();
    source = node1;
    normalDFS(node1, node23, myPath);
}